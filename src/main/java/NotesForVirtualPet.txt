	//starting values of pet
	
	public int illness = 50;
	public int boredom = 50;
	public int defecate = 0;
	public int thirst = 50;
	public int hunger = 50;
	
	public VirtualPet() {
		super();
		// TODO Auto-generated constructor stub
	}
	
	public void tick() {
		// TODO Auto-generated method stub
		
	}


	//Constructor creates a new pet Object by passing in values
	
	
	

	public VirtualPet(int hunger, int liquid, int poop, int laziness, int sickness) {
		this.hunger = hunger;
		thirst = liquid;
		defecate = poop;
		boredom = laziness;
		illness = sickness;
	}



	// method call for fed pet
	public int feedPet(int hungerOfPet, int amountOfFood) {

		if (hungerOfPet + amountOfFood >= 250) {
			// return
			System.out.println("this pony is full :(");
		}

		hungerOfPet += amountOfFood;
		return hungerOfPet;
	}

	// true or false on if a pony is hungry
	public boolean isHungry() {

		{

		}
		return true;
	}
		------------------------------------------------------
	This is calling a method
	
			timeSlept = 8;
		if (timeSlept < amountOfSleepNeeded) { // this is a conditional statement.
			sleepMessage = notEnoughSleep;
		} else {
			sleepMessage = completelyRested;
		}
		------------------------------------------------------

	//
	// Create a virtual pet application. This is your version of a Tamagotchi or
	// DigiPet! This might seem like
	// a daunting task, but we can break it down.
	//
	// Think of which instance variables and methods you will need. We give
	// suggestions below. Remember that
	// instance variables represent the state of your pet. Methods represent the
	// behavior of your pet, which
	// would include its responses to you feeding or playing with it.
	//
	// Most games include what is called a game loop, a loop which updates
	// everything in the game, representing
	// the passage of time. We exit this loop when something happens that should
	// cause the game to end.

	// Include a tick() method (think clocks, not parasites) in your VirtualPet
	// class representing the passage of
	// a unit of time. This should do things like update instance variables of
	// VirtualPet that are time dependent,
	// such as hunger or thirst. You should call the tick() to represent the passage
	// of time after each interaction
	// with the user.
	//
	// There is always some confusion with this tick() method. It has some
	// flexibility, what you are doing is changing
	// the properties of your Virtual Pet at some rate in this method...every time
	// this method is called, those properties
	// specified in this method would update.